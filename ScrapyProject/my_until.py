import re


def rm_html_words(text):
    """移除html标签，并去除特殊字符（非单词字符）"""
    return rm_not_words(rm_html_tag(text))


def rm_html_tag(text):
    """去除html标签<>中的内容并去除空白字符"""
    return re.sub("<.*?>|\s", "", text)


def rm_not_words(text):
    """移除非单词字符"""
    return re.sub("\W", "", text)


def rm_null_char(text):
    """去除空白字符"""
    return re.sub("\s", "", text)


def filter_phone(phone_str):
    """
    解析出所有的电话及手机号码
    :param phone_str: 包含电话或手机号码的字符串
    :return: 电话及手机号码的字典
    """
    # 过滤掉所有的特殊字符(不应该过滤)
    # phone_str = re.sub("\W", "", phone_str)
    # 构建手机号码表达式
    phone_reg = re.compile(r".*?(1)([358][0-9]|4[579]|66|7[0135678]|9[89])-?([0-9]{4})-?([0-9]{4}).*?")
    # 查找所有符合规则的手机号码片段分组，通过map函数拼接起来
    phones = list(map(lambda x: ''.join(x), phone_reg.findall(phone_str)))

    # 构建查找电话号码的正则表达式
    telephone_reg = re.compile(
        r".*?(0)(10|2[0-9]{2}|3[134579]{2}|4[1-8]{2}|5[1-9]{2}|63[1-5]|66[238]|69[12]|7[0-9]{2}|8[1-9]{2}|9[0134579])(-?)(\d{7,8}).*?")
    # 查找出所有的电话号码
    telephones = list(map(lambda x: ''.join(x), telephone_reg.findall(phone_str)))

    # 将手机号码和电话号码返回
    return {"phones": phones, "telephones": telephones}


def get_one_phone(phone_str):
    """获取一个手机号码"""
    phones = filter_phone(phone_str).get("phones")
    return phones[0] if len(phones) else ""


def get_all_phone(phone_str):
    """获取所有的手机号码"""
    return filter_phone(phone_str).get("phones")


def get_one_telephone(phone_str):
    """获取一个电话号码"""
    phones = filter_phone(phone_str).get("telephones")
    return phones[0] if len(phones) else ""


def get_all_telephone(phone_str):
    """获取所有的电话号码"""
    return filter_phone(phone_str).get("telephones")


def get_phone_telephone(phone_str):
    """获取所有的手机号码及电话号码"""
    phones = filter_phone(phone_str).get("phones")
    telephones = filter_phone(phone_str).get("telephones")
    return phones.extend(telephones)


def get_all_email(email):
    """获取所有的邮箱"""
    emails = re.findall(r'[0-9a-zA-Z_]{0,19}@[0-9a-zA-Z]{1,13}\.[com,cn,net]{1,3}', email)
    return emails


def get_one_email(email):
    """获取第一个符合规则的邮箱"""
    emails = re.findall(r'[0-9a-zA-Z_]{0,19}@[0-9a-zA-Z]{1,13}\.[com,cn,net]{1,3}', email)
    return emails[0] if len(emails) else ""


def get_province_city1(address):
    """从给定的地址字符创中获取省市"""
    import json
    with open("city.json", mode="r", encoding="utf-8") as f:
        provinces = json.loads(re.sub("省|市", "", f.read()))
    ls = list()
    beijing = ['东城区', '西城区', '朝阳区', '丰台区', '石景山区', '海淀区', '顺义区', '通州区', '大兴区', '房山区', '门头沟区', '昌平区', '平谷区', '密云区',
               '怀柔区', '延庆区']
    tianjing = ['和平区', '河东区', '河西区', '南开区', '河北区', '红桥区', '滨海新区', '东丽区', '西青区', '津南区', '北辰区', '武清区', '宝坻区', '宁河区',
                '静海区', '蓟州区']
    shanghai = ['黄浦区', '徐汇区', '长宁区', '静安区', '普陀区', '虹口区', '杨浦区', '浦东新区', '闵行区', '宝山区', '嘉定区', '金山区', '松江区', '青浦区',
                '奉贤区', '崇明区']
    chongqing = ['渝中区', '万州区', '涪陵区', '大渡口区', '江北区', '沙坪坝区', '九龙坡区', '南岸区', '北碚区', '綦江区', '大足区', '渝北区', '巴南区', '黔江区',
                 '长寿区', '江津区', '合川区', '永川区', '南川区', '璧山区', '铜梁区', '潼南区', '荣昌区', '开州区', '梁平区', '武隆区', '城口县', '丰都县',
                 '垫江县', '忠县', '云阳县', '奉节县', '巫山县', '巫溪县', '石柱土家族自治县', '秀山土家族苗族自治县', '酉阳土家族苗族自治县', '彭水苗族土家族自治县']
    d = dict()
    print(provinces)
    for province in provinces.values():
        print(province)
        # province["北京"] = beijing
        # province["天津"] = tianjing
        # province["上海"] = shanghai
        # province["重庆"] = chongqing

        # province["内蒙古自治区"] = "内蒙古"
        # province["西藏藏族自治区"] = "西藏"
        # province["宁夏回族自治区"] = "宁夏"
        # province["新疆维吾尔自治区"] = "新疆"
        # d[list(province.keys())[0]] = list(province.values())[0]
        # if province.get("内蒙古自治区"):
        #     p = province["内蒙古自治区"]
        #     d["内蒙古"] = p
        #     del d["内蒙古自治区"]
        #
        # if province.get("西藏藏族自治区"):
        #     p = province["西藏藏族自治区"]
        #     d["西藏"] = p
        #     del d["西藏藏族自治区"]
        #
        # if province.get("宁夏回族自治区"):
        #     p = province["宁夏回族自治区"]
        #     d["宁夏"] = p
        #     del d["宁夏回族自治区"]
        #
        # if province.get("新疆维吾尔自治区"):
        #     p = province["新疆维吾尔自治区"]
        #     d["新疆"] = p
        #     del d["新疆维吾尔自治区"]

        # print(province)

        # print(list(province.keys())[0])
        # ls.append(list(province.keys())[0])
    # print(ls)
    # print(d)
    print(d.keys())
    dic = dict()
    for key, value in zip(provinces.keys(), provinces.values()):
        print(key, value)
        for v in value:
            dic[v] = key
    print(dic)
    # with open("city.json", mode="w", encoding="utf-8") as f:
    #     f.write(json.dumps(d, ensure_ascii=False))
    with open("key_map.json", mode="w", encoding="utf-8") as f:
        f.write(json.dumps(dic, ensure_ascii=False))
    # print(provinces.keys())


def get_province_city(address):
    import re
    import json
    # with open("key_map.json", mode="r", encoding="utf-8") as f:
    #     city_map = json.loads(f.read())
    # 城市省份映射表
    city_map = {
        '郑州': '河南', '洛阳': '河南', '焦作': '河南', '商丘': '河南', '信阳': '河南', '周口': '河南', '鹤壁': '河南', '安阳': '河南',
        '濮阳': '河南', '驻马店': '河南', '南阳': '河南', '开封': '河南', '漯河': '河南', '许昌': '河南', '新乡': '河南', '济源': '河南',
        '灵宝': '河南', '偃师': '河南', '邓州': '河南', '登封': '河南', '三门峡': '河南', '新郑': '河南', '禹州': '河南', '巩义': '河南',
        '永城': '河南', '长葛': '河南', '义马': '河南', '林州': '河南', '项城': '河南', '汝州': '河南', '荥阳': '河南', '平顶山': '河南',
        '卫辉': '河南', '辉县': '河南', '舞钢': '河南', '新密': '河南', '孟州': '河南', '沁阳': '河南', '郏县': '河南', '合肥': '安徽',
        '亳州': '安徽', '芜湖': '安徽', '马鞍山': '安徽', '池州': '安徽', '黄山': '安徽', '滁州': '安徽', '安庆': '安徽', '淮南': '安徽',
        '淮北': '安徽', '蚌埠': '安徽', '宿州': '安徽', '宣城': '安徽', '六安': '安徽', '阜阳': '安徽', '铜陵': '安徽', '明光': '安徽',
        '天长': '安徽', '宁国': '安徽', '界首': '安徽', '桐城': '安徽', '潜山': '安徽', '福州': '福建', '厦门': '福建', '泉州': '福建',
        '漳州': '福建', '南平': '福建', '三明': '福建', '龙岩': '福建', '莆田': '福建', '宁德': '福建', '建瓯': '福建', '武夷山': '福建',
        '长乐': '福建', '福清': '福建', '晋江': '福建', '南安': '福建', '福安': '福建', '龙海': '福建', '邵武': '福建', '石狮': '福建',
        '福鼎': '福建', '建阳': '福建', '漳平': '福建', '永安': '福建', '兰州': '甘肃', '白银': '甘肃', '武威': '甘肃', '金昌': '甘肃',
        '平凉': '甘肃', '张掖': '甘肃', '嘉峪关': '甘肃', '酒泉': '甘肃', '庆阳': '甘肃', '定西': '甘肃', '陇南': '甘肃', '天水': '甘肃',
        '玉门': '甘肃', '临夏': '甘肃', '合作': '甘肃', '敦煌': '甘肃', '甘南州': '甘肃', '贵阳': '贵州', '安顺': '贵州', '遵义': '贵州',
        '六盘水': '贵州', '兴义': '贵州', '都匀': '贵州', '凯里': '贵州', '毕节': '贵州', '清镇': '贵州', '铜仁': '贵州', '赤水': '贵州',
        '仁怀': '贵州', '福泉': '贵州', '海口': '海南', '三亚': '海南', '万宁': '海南', '文昌': '海南', '儋州': '海南', '琼海': '海南',
        '东方': '海南', '五指山': '海南', '石家庄': '河北', '保定': '河北', '唐山': '河北', '邯郸': '河北', '邢台': '河北', '沧州': '河北', '衡水': '河北',
        '廊坊': '河北', '承德': '河北', '迁安': '河北', '鹿泉': '河北', '秦皇岛': '河北', '南宫': '河北', '任丘': '河北', '叶城': '河北',
        '辛集': '河北', '涿州': '河北', '定州': '河北', '晋州': '河北', '霸州': '河北', '黄骅': '河北', '遵化': '河北', '张家口': '河北',
        '沙河': '河北', '三河': '河北', '冀州': '河北', '武安': '河北', '河间': '河北', '深州': '河北', '新乐': '河北', '泊头': '河北', '安国': '河北',
        '双滦区': '河北', '高碑店': '河北', '哈尔滨': '黑龙江', '伊春': '黑龙江', '牡丹江': '黑龙江', '大庆': '黑龙江', '鸡西': '黑龙江',
        '鹤岗': '黑龙江', '绥化': '黑龙江', '齐齐哈尔': '黑龙江', '黑河': '黑龙江', '富锦': '黑龙江', '虎林': '黑龙江', '密山': '黑龙江',
        '佳木斯': '黑龙江', '双鸭山': '黑龙江', '海林': '黑龙江', '铁力': '黑龙江', '北安': '黑龙江', '五大连池': '黑龙江', '阿城': '黑龙江',
        '尚志': '黑龙江', '五常': '黑龙江', '安达': '黑龙江', '七台河': '黑龙江', '绥芬河': '黑龙江', '双城': '黑龙江', '海伦': '黑龙江',
        '宁安': '黑龙江', '讷河': '黑龙江', '穆棱': '黑龙江', '同江': '黑龙江', '肇东': '黑龙江', '武汉': '湖北', '荆门': '湖北', '咸宁': '湖北',
        '襄阳': '湖北', '荆州': '湖北', '黄石': '湖北', '宜昌': '湖北', '随州': '湖北', '鄂州': '湖北', '孝感': '湖北', '黄冈': '湖北',
        '十堰': '湖北', '枣阳': '湖北', '老河口': '湖北', '恩施': '湖北', '仙桃': '湖北', '天门': '湖北', '钟祥': '湖北', '潜江': '湖北',
        '麻城': '湖北', '洪湖': '湖北', '汉川': '湖北', '赤壁': '湖北', '松滋': '湖北', '丹江口': '湖北', '武穴': '湖北', '广水': '湖北',
        '石首': '湖北', '大冶': '湖北', '枝江': '湖北', '应城': '湖北', '宜城': '湖北', '当阳': '湖北', '安陆': '湖北', '宜都': '湖北', '利川': '湖北',
        '长沙': '湖南', '郴州': '湖南', '益阳': '湖南', '娄底': '湖南', '株洲': '湖南', '衡阳': '湖南', '湘潭': '湖南', '岳阳': '湖南',
        '常德': '湖南', '邵阳': '湖南', '永州': '湖南', '张家界': '湖南', '怀化': '湖南', '浏阳': '湖南', '醴陵': '湖南', '湘乡': '湖南',
        '耒阳': '湖南', '沅江': '湖南', '涟源': '湖南', '常宁': '湖南', '吉首': '湖南', '津': '湖南', '冷水江': '湖南', '临湘': '湖南',
        '汨罗': '湖南', '武冈': '湖南', '韶山': '湖南', '湘西州': '湖南', '长春': '吉林', '吉林': '吉林', '通化': '吉林', '白城': '吉林',
        '四平': '吉林', '辽源': '吉林', '松原': '吉林', '白山': '吉林', '集安': '吉林', '梅河口': '吉林', '双辽': '吉林', '延吉': '吉林',
        '九台': '吉林', '桦甸': '吉林', '榆树': '吉林', '蛟河': '吉林', '磐石': '吉林', '大安': '吉林', '德惠': '吉林', '洮南': '吉林',
        '龙井': '吉林', '珲春': '吉林', '公主岭': '吉林', '图们': '吉林', '舒兰': '吉林', '和龙': '吉林', '临江': '吉林', '敦化': '吉林',
        '南京': '江苏', '无锡': '江苏', '常州': '江苏', '扬州': '江苏', '徐州': '江苏', '苏州': '江苏', '连云港': '江苏', '盐城': '江苏',
        '淮安': '江苏', '宿迁': '江苏', '镇江': '江苏', '南通': '江苏', '泰州': '江苏', '兴化': '江苏', '东台': '江苏', '常熟': '江苏',
        '江阴': '江苏', '张家港': '江苏', '通州': '江苏', '宜兴': '江苏', '邳州': '江苏', '海门': '江苏', '溧阳': '江苏', '泰兴': '江苏',
        '如皋': '江苏', '昆山': '江苏', '启东': '江苏', '江都': '江苏', '丹阳': '江苏', '吴江': '江苏', '靖江': '江苏', '扬中': '江苏',
        '新沂': '江苏', '仪征': '江苏', '太仓': '江苏', '姜堰': '江苏', '高邮': '江苏', '金坛': '江苏', '句容': '江苏', '灌南县': '江苏',
        '南昌': '江西', '赣州': '江西', '上饶': '江西', '宜春': '江西', '景德镇': '江西', '新余': '江西', '九江': '江西', '萍乡': '江西',
        '抚州': '江西', '鹰潭': '江西', '吉安': '江西', '丰城': '江西', '樟树': '江西', '德兴': '江西', '瑞金': '江西', '井冈山': '江西',
        '高安': '江西', '乐平': '江西', '南康': '江西', '贵溪': '江西', '瑞昌': '江西', '东乡县': '江西', '广丰县': '江西', '信州区': '江西',
        '三清山': '江西', '沈阳': '辽宁', '葫芦岛': '辽宁', '大连': '辽宁', '盘锦': '辽宁', '鞍山': '辽宁', '铁岭': '辽宁', '本溪': '辽宁',
        '丹东': '辽宁', '抚顺': '辽宁', '锦州': '辽宁', '辽阳': '辽宁', '阜新': '辽宁', '调兵山': '辽宁', '朝阳': '辽宁', '海城': '辽宁',
        '北票': '辽宁', '盖州': '辽宁', '凤城': '辽宁', '庄河': '辽宁', '凌源': '辽宁', '开原': '辽宁', '兴城': '辽宁', '新民': '辽宁',
        '大石桥': '辽宁', '东港': '辽宁', '北宁': '辽宁', '瓦房店': '辽宁', '普兰店': '辽宁', '凌海': '辽宁', '灯塔': '辽宁', '营口': '辽宁',
        '西宁': '青海', '格尔木': '青海', '德令哈': '青海', '济南': '山东', '青岛': '山东', '威海': '山东', '潍坊': '山东', '菏泽': '山东',
        '济宁': '山东', '东营': '山东', '烟台': '山东', '淄博': '山东', '枣庄': '山东', '泰安': '山东', '临沂': '山东', '日照': '山东', '德州': '山东',
        '聊城': '山东', '滨州': '山东', '乐陵': '山东', '兖州': '山东', '诸城': '山东', '邹城': '山东', '滕州': '山东', '肥城': '山东',
        '新泰': '山东', '胶州': '山东', '胶南': '山东', '即墨': '山东', '龙口': '山东', '平度': '山东', '莱西': '山东', '太原': '山西',
        '大同': '山西', '阳泉': '山西', '长治': '山西', '临汾': '山西', '晋中': '山西', '运城': '山西', '忻州': '山西', '朔州': '山西',
        '吕梁': '山西', '古交': '山西', '高平': '山西', '永济': '山西', '孝义': '山西', '侯马': '山西', '霍州': '山西', '介休': '山西',
        '河津': '山西', '汾阳': '山西', '原平': '山西', '晋城': '山西', '潞城': '山西', '西安': '陕西', '咸阳': '陕西', '榆林': '陕西',
        '宝鸡': '陕西', '铜川': '陕西', '渭南': '陕西', '汉中': '陕西', '安康': '陕西', '商洛': '陕西', '延安': '陕西', '韩城': '陕西',
        '兴平': '陕西', '华阴': '陕西', '成都': '四川', '广安': '四川', '德阳': '四川', '乐山': '四川', '巴中': '四川', '内江': '四川',
        '宜宾': '四川', '南充': '四川', '都江堰': '四川', '自贡': '四川', '泸州': '四川', '广元': '四川', '达州': '四川', '资阳': '四川', '绵阳': '四川',
        '眉山': '四川', '遂宁': '四川', '雅安': '四川', '阆中': '四川', '攀枝花': '四川', '广汉': '四川', '绵竹': '四川', '万源': '四川',
        '华蓥': '四川', '江油': '四川', '西昌': '四川', '彭州': '四川', '简阳': '四川', '崇州': '四川', '什邡': '四川', '峨眉山': '四川',
        '邛崃': '四川', '双流县': '四川', '昆明': '云南', '玉溪': '云南', '大理': '云南', '曲靖': '云南', '昭通': '云南', '保山': '云南',
        '丽江': '云南', '临沧': '云南', '楚雄': '云南', '开远': '云南', '个旧': '云南', '景洪': '云南', '安宁': '云南', '宣威': '云南',
        '杭州': '浙江', '宁波': '浙江', '绍兴': '浙江', '温州': '浙江', '台州': '浙江', '湖州': '浙江', '嘉兴': '浙江', '金华': '浙江',
        '舟山': '浙江', '衢州': '浙江', '丽水': '浙江', '余姚': '浙江', '乐清': '浙江', '临海': '浙江', '温岭': '浙江', '永康': '浙江',
        '瑞安': '浙江', '慈溪': '浙江', '义乌': '浙江', '上虞': '浙江', '诸暨': '浙江', '海宁': '浙江', '桐乡': '浙江', '兰溪': '浙江',
        '龙泉': '浙江', '建德': '浙江', '富德': '浙江', '富阳': '浙江', '平湖': '浙江', '东阳': '浙江', '嵊州': '浙江', '奉化': '浙江',
        '临安': '浙江', '江山': '浙江', '台北': '台湾', '台南': '台湾', '台中': '台湾', '高雄': '台湾', '桃源': '台湾', '广州': '广东',
        '深圳': '广东', '珠海': '广东', '汕头': '广东', '佛山': '广东', '韶关': '广东', '湛江': '广东', '肇庆': '广东', '江门': '广东', '茂名': '广东',
        '惠州': '广东', '梅州': '广东', '汕尾': '广东', '河源': '广东', '阳江': '广东', '清远': '广东', '东莞': '广东', '中山': '广东',
        '潮州': '广东', '揭阳': '广东', '云浮': '广东', '南宁': '广西', '贺州': '广西', '玉林': '广西', '桂林': '广西', '柳州': '广西',
        '梧州': '广西', '北海': '广西', '钦州': '广西', '百色': '广西', '防城港': '广西', '贵港': '广西', '河池': '广西', '崇左': '广西',
        '来宾': '广西', '东兴': '广西', '桂平': '广西', '北流': '广西', '岑溪': '广西', '合山': '广西', '凭祥': '广西', '宜州': '广西',
        '呼和浩特': '内蒙古', '呼伦贝尔': '内蒙古', '赤峰': '内蒙古', '扎兰屯': '内蒙古', '鄂尔多斯': '内蒙古', '乌兰察布': '内蒙古', '巴彦淖尔': '内蒙古',
        '二连浩特': '内蒙古', '霍林郭勒': '内蒙古', '包头': '内蒙古', '乌海': '内蒙古', '阿尔山': '内蒙古', '乌兰浩特': '内蒙古', '锡林浩特': '内蒙古',
        '根河': '内蒙古', '满洲里': '内蒙古', '额尔古纳': '内蒙古', '牙克石': '内蒙古', '临河': '内蒙古', '丰镇': '内蒙古', '通辽': '内蒙古',
        '银川': '宁夏', '固原': '宁夏', '石嘴山': '宁夏', '青铜峡': '宁夏', '中卫': '宁夏', '吴忠': '宁夏', '灵武': '宁夏', '拉萨': '西藏',
        '那曲': '西藏', '山南': '西藏', '林芝': '西藏', '昌都': '西藏', '阿里地区': '西藏', '日喀则': '西藏', '乌鲁木齐': '新疆', '石河子': '新疆', '喀什': '新疆',
        '阿勒泰': '新疆', '阜康': '新疆', '库尔勒': '新疆', '阿克苏': '新疆', '阿拉尔': '新疆', '哈密': '新疆', '克拉玛依': '新疆', '昌吉': '新疆',
        '奎屯': '新疆', '米泉': '新疆', '和田': '新疆', '东城区': '北京', '西城区': '北京', '朝阳区': '北京', '丰台区': '北京', '石景山区': '北京',
        '海淀区': '北京', '顺义区': '北京', '通州区': '北京', '大兴区': '北京', '房山区': '北京', '门头沟区': '北京', '昌平区': '北京', '平谷区': '北京',
        '密云区': '北京', '怀柔区': '北京', '延庆区': '北京', '和平区': '天津', '河东区': '天津', '河西区': '天津', '南开区': '天津', '河北区': '天津',
        '红桥区': '天津', '滨海新区': '天津', '东丽区': '天津', '西青区': '天津', '津南区': '天津', '北辰区': '天津', '武清区': '天津', '宝坻区': '天津',
        '宁河区': '天津', '静海区': '天津', '蓟州区': '天津', '黄浦区': '上海', '徐汇区': '上海', '长宁区': '上海', '静安区': '上海', '普陀区': '上海',
        '虹口区': '上海', '杨浦区': '上海', '浦东新区': '上海', '闵行区': '上海', '宝山区': '上海', '嘉定区': '上海', '金山区': '上海', '松江区': '上海',
        '青浦区': '上海', '奉贤区': '上海', '崇明区': '上海', '渝中区': '重庆', '万州区': '重庆', '涪陵区': '重庆', '大渡口区': '重庆', '江北区': '重庆',
        '沙坪坝区': '重庆', '九龙坡区': '重庆', '南岸区': '重庆', '北碚区': '重庆', '綦江区': '重庆', '大足区': '重庆', '渝北区': '重庆',
        '巴南区': '重庆', '黔江区': '重庆', '长寿区': '重庆', '江津区': '重庆', '合川区': '重庆', '永川区': '重庆', '南川区': '重庆', '璧山区': '重庆',
        '铜梁区': '重庆', '潼南区': '重庆', '荣昌区': '重庆', '开州区': '重庆', '梁平区': '重庆', '武隆区': '重庆', '城口县': '重庆', '丰都县': '重庆',
        '垫江县': '重庆', '忠县': '重庆', '云阳县': '重庆', '奉节县': '重庆', '巫山县': '重庆', '巫溪县': '重庆', '石柱土家族自治县': '重庆',
        '秀山土家族苗族自治县': '重庆', '酉阳土家族苗族自治县': '重庆', '彭水苗族土家族自治县': '重庆'
    }

    # 省份表
    provinces = ['青海', '重庆', '浙江', '山东', '甘肃', '海南', '内蒙古', '上海', '广西', '河北', '黑龙江', '吉林', '广东', '河南', '陕西', '台湾', '山西',
                 '福建', '宁夏', '云南', '西藏', '新疆', '天津', '辽宁', '湖南', '江苏', '湖北', '四川', '贵州', '安徽', '北京', '江西']

    cities = city_map.keys()
    # 查找映射中的城市是否在地址中出现
    for city in cities:
        if city in address:
            return {"province": city_map[city], "city": city}
    else:
        # 未找到城市
        for province in provinces:
            if province in address:
                return {"province": province, "city": ""}
        else:
            return {}


def get_browser_headers(s):
    """通过浏览器中复制的字符串，获取浏览器请求头获取参数列表的字典形式"""
    headers = {i.split(": ")[0]: i.split(": ")[1] for i in s.split("\n")}
    print(headers)
    return headers


if __name__ == '__main__':
    import time
    import pymysql

    con = pymysql.Connection(database="meituan_cate", password='54dsWWPnGMyhdKzH', host="114.116.126.177", port=6653,
                             user='meituan_cate')
    cursor = con.cursor()
    sql = "select * from ysw_store limit 50"
    cursor.execute(sql)
    datas = cursor.fetchall()
    print(datas)
    cursor.close()
    con.close()
    ls = list()
    ls1 = list()
    for i in datas:
        d = get_province_city(i[4])
        if d.get("province"):
            d["name"] = i[1]
            d["address"] = i[4]
            ls.append(d)
        else:
            d = get_province_city(i[1])
            if d.get("province"):
                d["name"] = i[1]
                d["address"] = i[4]
                ls.append(d)
            else:
                ls1.append(i)
    for i in ls:
        print(i)
    print(ls)
    print(len(ls))

    # s = time.time()
    # for i in range(100000):
    #     data = get_province_city("河南省fdfdfddffdfjioaojifdsknkfkndkkmfklfdpfdkpsfkfdkkdkf发许昌打卡机副科级的")
    # end = time.time()
    # print(end - s)
    # print(data)
    s = """
    asdb@163.com.cn asdf ss-a@ss.net asdf asdd.cba@163.com349891834092*07720773-25419389d400-445518856js138159260188
    asdb@163.com.cn asdf ss-a@s349891834092*0772451411230773-25419389d400-4455181543310856js138159260188
    <font>
                                                            武汉华宇<font class="highlight">科技</font>售后维修中心</font>
    
    """
    s1 = """
    <font>
                                                            武汉华宇<font class="highlight">@科技</font>售后维修中心</font>
    """
    # print("filter_phone:", filter_phone(s))
    # print("get_all_phone:", get_all_phone(s))
    # print("get_all_telephone:", get_all_telephone(s))
    # print("get_one_phone:", get_one_phone(s))
    # print("get_one_telephone:", get_one_telephone(s))
    # print("get_all_email:", get_all_email(s))
    # print("get_one_email:", get_one_email(s))
    # print("rm_html_tag:", rm_html_tag(s1))
    # print("rm_null_char:", rm_not_words(rm_html_tag(s1)))
    # print("rm_html_words:", rm_html_words(s1))
    # print("rm_null_char:", rm_null_char(s1))
    # get_province_city("河南 郑州金水区")

    # 获取请求头
    headers = """Host: baike.baidu.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:69.0) Gecko/20100101 Firefox/69.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate, br
Referer: https://baike.baidu.com/item/%E9%99%95%E8%A5%BF/193811
Connection: keep-alive
Cookie: BIDUPSID=5AE1384BF50F4490B11EEEFF937E581A; BAIDUID=9CB2321515D7E8C86ED780533AD0097F:FG=1; PSTM=1568195360; Hm_lvt_55b574651fcae74b0a9f1cf9c8d7c93a=1569723582,1569726056,1569740865,1569740896; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BK_SEARCHLOG=%7B%22keydelPer=0; PSINO=1; Hm_lpvt_55b574651fcae74b0a9f1cf9c8d7c93a=1569741796; pgv_pvi=2994591744; pgv_si=s6860943360; BDRCVFR[gltLrB7qNCt]=mk3SLVN4HKm; ZD_ENTRY=baidu; ___wk_scode_token=0a0FGX2wX%2BMT0mF%2FXoRIN0%2FoP%2FLaxRPBl9qqx3EsH3U%3D; session_id=1569726046908; session_name=www.baidu.com; locale=zh
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0"""
    # get_browser_headers(headers)
